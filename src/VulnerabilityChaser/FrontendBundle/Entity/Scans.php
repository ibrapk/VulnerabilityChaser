<?php

namespace VulnerabilityChaser\FrontendBundle\Entity;
use Symfony\Component\Validator\Constraints as Assert;
use Symfony\Component\HttpFoundation\File\UploadedFile;
use Doctrine\ORM\Mapping as ORM;

/**
 * VulnerabilityChaser\FrontendBundle\Entity\Scans
 *
 * @ORM\Table(name="scans")
 * @ORM\Entity
 * @ORM\HasLifecycleCallbacks
 */
class Scans
{

    /**
     * @var integer $id
     *
     * @ORM\Column(name="id", type="integer", nullable=false)
     * @ORM\Id
     * @ORM\GeneratedValue(strategy="IDENTITY")
     */
    private $id;
    
    /**
     * @var string $path
     *
     * @ORM\Column(name="path", type="string", length=255, nullable=true)
     */
    private $path;
    
    /**
     * @var datetime $date
     *
     * @ORM\Column(name="date", type="datetime", nullable=false)
     */
    private $date;

    /**
     * @var Users
     *
     * @ORM\ManyToOne(targetEntity="Users")
     * @ORM\JoinColumns({
     *   @ORM\JoinColumn(name="users_id", referencedColumnName="id")
     * })
     */
    private $users;
    
    /**
     * @var Agroups
     *
     * @ORM\ManyToOne(targetEntity="Agroups")
     */
    private $agroups;


    /**
     * @var File
     * 
     * @Assert\File(maxSize="600000000000")
     */
    public $file;

    /**
     * Get id
     *
     * @return integer 
     */
    public function getId()
    {
        return $this->id;
    }

    /**
     * Set date
     *
     * @param datetime $date
     */
    public function setDate($date)
    {
        $this->date = $date;
    }

    /**
     * Get date
     *
     * @return datetime 
     */
    public function getDate()
    {
    	return $this->date;
    }

    /**
     * Set users
     *
     * @param VulnerabilityChaser\FrontendBundle\Entity\Users $users
     */
    public function setUsers(\VulnerabilityChaser\FrontendBundle\Entity\Users $users)
    {
    	$this->users = $users;
    }

    /**
     * Get users
     *
     * @return VulnerabilityChaser\FrontendBundle\Entity\Users
     */
    public function getUsers()
    {
    	return $this->users;
    }

    /**
     * Set path
     *
     * @param string $path
     */
    public function setPath($path)
    {
    	$this->path = $path;
    }

    /**
     * Get path
     *
     * @return string
     */
    public function getPath()
    {
    	return $this->path;
    }

    public function getWebPath()
    {
    	return null === $this->path ? null : $this->getUploadDir().'/'.$this->path;
    }

    protected function getUploadRootDir()
    {
    	// the absolute directory path where uploaded documents should be saved
    	return __DIR__.'/../../../../web/'.$this->getUploadDir();
    }

    protected function getUploadDir()
    {
    	return 'uploads/scans';
    }
    
    /**
     * @ORM\PrePersist()
     * @ORM\PreUpdate()
     */
    public function preUpload()
    {
    	if (null !== $this->file) {
    		$this->path = $this->file->getClientOriginalName();
    	}
    }
    
    /**
     * @ORM\PostPersist()
     * @ORM\PostUpdate()
     */
    public function upload()
    {
    	if (null === $this->file) {
    		return;
    	}

    	$this->file->move($this->getUploadRootDir(), $this->id.'.xml');
    
    	unset($this->file);
    }
    
    /**
     * @ORM\PreRemove()
     */
    public function removeUpload()
    {
    	if ($file = $this->getAbsolutePath()) {
    		unlink($file);
    	}
    }
    
    public function getAbsolutePath()
    {
    	return null === $this->path ? null : $this->getUploadRootDir().'/'.$this->id.'.xml';
    }



    /**
     * Set agroups
     *
     * @param VulnerabilityChaser\FrontendBundle\Entity\Agroups $agroups
     */
    public function setAgroups(\VulnerabilityChaser\FrontendBundle\Entity\Agroups $agroups)
    {
        $this->agroups = $agroups;
    }

    /**
     * Get agroups
     *
     * @return VulnerabilityChaser\FrontendBundle\Entity\Agroups 
     */
    public function getAgroups()
    {
        return $this->agroups;
    }
}