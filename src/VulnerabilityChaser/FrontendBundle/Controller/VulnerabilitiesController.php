<?php

namespace VulnerabilityChaser\FrontendBundle\Controller;
use VulnerabilityChaser\FrontendBundle\Entity\StatusType;

use VulnerabilityChaser\FrontendBundle\Entity\Status;

use Symfony\Bundle\FrameworkBundle\Controller\Controller;

use VulnerabilityChaser\FrontendBundle\Entity\Cve;
use VulnerabilityChaser\FrontendBundle\Entity\Assets;
use VulnerabilityChaser\FrontendBundle\Entity\Idvulnerabilities;
use VulnerabilityChaser\FrontendBundle\Entity\Vulnerabilities;

class VulnerabilitiesController extends Controller {

	public function showAction() {

		$em = $this->getDoctrine()->getEntityManager();
		$query = $em->createQuery('SELECT v FROM FrontendBundle:Vulnerabilities v 
				JOIN v.assets va JOIN va.agroups vag
				Order By v.severity DESC, vag.name ');

		try {
			$vulnerabilities = $query->getResult();
		} catch (\Doctrine\ORM\NoResultException $e) {
			$vulnerabilities[] = new Vulnerabilities();
		}

		return $this
				->render(
						'FrontendBundle:Vulnerabilities:showVulnerabilities.html.twig',
						array('vulnerabilities' => $vulnerabilities));
	}

	/**
	 * Convierte un vector de objetos statusType en un vector de cadenas de nombres de Agroups
	 */
	private function statusArray($statusType) {
		$status = array();
		Foreach ($statusType as $i => $item) {
			$status[$i] = $item->getStatus();
		}
		return $status;
	}
	
	public function showVulnerabilityAction($id) {
		$em = $this->getDoctrine()->getEntityManager();
		$vulnerability = $em->getRepository('FrontendBundle:Vulnerabilities')
				->findOneById($id);
		
		$stats = $em->getRepository('FrontendBundle:Status')->findByVulnerability($id);
		$query = $em->createQuery('SELECT s FROM FrontendBundle:StatusType s
				Order By s.id ASC');
		try {
			$statusType = $query->getResult();
		} catch (\Doctrine\ORM\NoResultException $e) {
			$statusType = new StatusType();
		}
		
		
		
		$defaultData = array();
		$form = $this->createFormBuilder($defaultData)
		->add('status', 'choice',
				array('empty_value' => 'Choose an status',
						'choices' => $this->statusArray($statusType),
						'required' => true))
		->add('planned', 'date', 
				array('input'  => 'datetime',
						'widget' => 'choice',
						'required' => false))
		->add('comments', 'text', array('required' => false))	
		->getForm();
		
		
		if ($this->getRequest()->getMethod() === 'POST') {
			// TODO Comprobar transiciones imposibles de estados. De Â¿open a open? -> error
			$form->bindRequest($this->getRequest());
			if ($form->isValid()) {
				$data = $form->getData();
		
				$status = new Status();
				$status->setVulnerability($vulnerability);
				$status->setStatus($em->getRepository('FrontendBundle:StatusType')->findOneBy(array('id' => $data['status'] + 1)));
				$status->setDatestart(new \DateTime());
				if (!empty($data['planned'])) {
					$status->setDateend($data['planned']);
				}
				if (!empty($data['comments'])) {
					$status->setComments($data['comments']);
				}

				$em->persist($status);
				$em->flush();
				
				$stats = $em->getRepository('FrontendBundle:Status')->findByVulnerability($id);

			}
		}
		

		return $this->render(
						'FrontendBundle:Vulnerabilities:showVulnerability.html.twig',
						array('vulnerability' => $vulnerability, 'stats' => $stats, 'form' => $form->createView()));
	}

	public function showAssetAction($id) {
		$em = $this->getDoctrine()->getEntityManager();
		$asset = $em->getRepository('FrontendBundle:Assets')->findOneById($id);

		return $this
				->render('FrontendBundle:Vulnerabilities:showAsset.html.twig',
						array('asset' => $asset));
	}
	
	public function showAssetsAction() {
		$em = $this->getDoctrine()->getEntityManager();
		$query = $em->createQuery('SELECT a FROM FrontendBundle:Assets a
				JOIN a.agroups ag');
		try {
			$assets = $query->getResult();
		} catch (\Doctrine\ORM\NoResultException $e) {
			$assets[] = new Assets();
		}
	
		return $this
		->render('FrontendBundle:Vulnerabilities:showAssets.html.twig',
				array('assets' => $assets));
	}
}

