<?php

namespace VulnerabilityChaser\FrontendBundle\Controller;
use VulnerabilityChaser\FrontendBundle\Entity\StatusType;

use VulnerabilityChaser\FrontendBundle\Entity\Status;

use Symfony\Bundle\FrameworkBundle\Controller\Controller;

use VulnerabilityChaser\FrontendBundle\Entity\Cve;
use VulnerabilityChaser\FrontendBundle\Entity\Assets;
use VulnerabilityChaser\FrontendBundle\Entity\Idvulnerabilities;
use VulnerabilityChaser\FrontendBundle\Entity\Vulnerabilities;

class VulnerabilitiesController extends Controller {

	public function showAction() {

		$em = $this->getDoctrine()->getEntityManager();
		$query = $em
				->createQuery(
						'SELECT v FROM FrontendBundle:Vulnerabilities v 
				JOIN v.assets va JOIN va.agroups vag
				Order By v.severity DESC, vag.name ');

		try {
			$vulnerabilities = $query->getResult();
		} catch (\Doctrine\ORM\NoResultException $e) {
			$vulnerabilities[] = new Vulnerabilities();
		}

		return $this
				->render(
						'FrontendBundle:Vulnerabilities:showVulnerabilities.html.twig',
						array('vulnerabilities' => $vulnerabilities));
	}

	/**
	 * Convierte un vector de objetos statusType en un vector de cadenas de nombres de Agroups
	 */
	private function statusArray($statusType) {
		$status = array();
		Foreach ($statusType as $i => $item) {
			$status[$i] = $item->getStatus();
		}
		return $status;
	}

	public function showVulnerabilityAction($id) {
		$em = $this->getDoctrine()->getEntityManager();
		$vulnerability = $em->getRepository('FrontendBundle:Vulnerabilities')
				->findOneById($id);

		$stats = $em->getRepository('FrontendBundle:Status')
				->findByVulnerability($id);
		$query = $em
				->createQuery(
						'SELECT s FROM FrontendBundle:StatusType s
				Order By s.id ASC');
		try {
			$statusType = $query->getResult();
		} catch (\Doctrine\ORM\NoResultException $e) {
			$statusType = new StatusType();
		}

		$defaultData = array();
		$form = $this->createFormBuilder($defaultData)
				->add('status', 'choice',
						array('empty_value' => 'Choose a status',
								'choices' => $this->statusArray($statusType),
								'required' => true))
				->add('planned', 'date',
						array('input' => 'datetime', 'widget' => 'choice',
								'required' => false))
				->add('comments', 'text', array('required' => false))
				->getForm();

		if ($this->getRequest()->getMethod() === 'POST') {
			// TODO Comprobar transiciones imposibles de estados. De Â¿open a open? -> error
			$form->bindRequest($this->getRequest());
			if ($form->isValid()) {
				$data = $form->getData();

				$status = new Status();
				$status->setVulnerability($vulnerability);
				$status
						->setStatus(
								$em->getRepository('FrontendBundle:StatusType')
										->findOneBy(
												array(
														'id' => $data['status']
																+ 1)));
				$status->setDatestart(new \DateTime());
				if (!empty($data['planned'])) {
					$status->setDateend($data['planned']);
				}
				if (!empty($data['comments'])) {
					$status->setComments($data['comments']);
				}

				$em->persist($status);
				$em->flush();

				$stats = $em->getRepository('FrontendBundle:Status')
						->findByVulnerability($id);

			}
		}

		return $this
				->render(
						'FrontendBundle:Vulnerabilities:showVulnerability.html.twig',
						array('vulnerability' => $vulnerability,
								'stats' => $stats,
								'form' => $form->createView()));
	}

	public function showAssetAction($id) {
		$em = $this->getDoctrine()->getEntityManager();
		$asset = $em->getRepository('FrontendBundle:Assets')->findOneById($id);

		$collateralDamagePotential = array('0' => 'none', '0.1' => 'low',
				'0.3' => 'low-medium', '0.4' => 'medium-high', '0.5' => 'high',
				'0.0' => 'not-defined');

		$targetDistribution = array('0' => 'none', '0.25' => 'low',
				'0.75' => 'medium', '1' => 'high', '1.0' => 'not-defined');

		$confReq = array('0.5' => 'low', '1' => 'medium', '1.51' => 'high',
				'1.0' => 'not-defined');

		$integReq = array('0.5' => 'low', '1' => 'medium', '1.51' => 'high',
				'1.0' => 'not-defined');

		$availReq = array('0.5' => 'low', '1' => 'medium', '1.51' => 'high',
				'1.0' => 'not-defined');

		$defaultData = array();
		$form = $this->createFormBuilder($defaultData)
				->add('CollateralDamagePotential', 'choice',
						array('empty_value' => 'Choose',
								'choices' => $collateralDamagePotential,
								'required' => true))
				->add('TargetDistribution', 'choice',
						array('empty_value' => 'Choose',
								'choices' => $targetDistribution,
								'required' => true))
				->add('ConfReq', 'choice',
						array('empty_value' => 'Choose', 'choices' => $confReq,
								'required' => true))
				->add('IntegReq', 'choice',
						array('empty_value' => 'Choose',
								'choices' => $integReq, 'required' => true))
				->add('availReq', 'choice',
						array('empty_value' => 'Choose',
								'choices' => $availReq, 'required' => true))
				->getForm();

		if ($this->getRequest()->getMethod() === 'POST') {
			$form->bindRequest($this->getRequest());
			if ($form->isValid()) {
				$data = $form->getData();

				$asset
						->setCollateralDamagePotential(
								(float) $data['CollateralDamagePotential']);
				$asset
						->setTargetDistribution(
								(float) $data['TargetDistribution']);
				$asset->setConfReq((float) $data['ConfReq']);
				$asset->setIntegReq((float) $data['IntegReq']);
				$asset->setAvailReq((float) $data['availReq']);
				
				$vulnerabilities = $asset->getVulnerabilities();
				for ($i = 0; $i < sizeof($vulnerabilities); $i++) {
					if ($vulnerabilities[$i]->getCvssBaseVector() != ''){
						if ($vulnerabilities[$i]->getCvssTmpVector() != ''){
							
						} else {
							$vulnerabilities[$i]->setCvss($this->calcCVSS($vulnerabilities[$i], $asset));
						}
						$em->persist($vulnerabilities[$i]);
					}
				}

				$em->persist($asset);
				$em->flush();
			}
		}

		return $this
				->render('FrontendBundle:Vulnerabilities:showAsset.html.twig',
						array('asset' => $asset, 'form' => $form->createView()));
	}

	public function showAssetsAction() {
		$em = $this->getDoctrine()->getEntityManager();
		$query = $em
				->createQuery(
						'SELECT a FROM FrontendBundle:Assets a
				JOIN a.agroups ag');
		try {
			$assets = $query->getResult();
		} catch (\Doctrine\ORM\NoResultException $e) {
			$assets[] = new Assets();
		}

		return $this
				->render(
						'FrontendBundle:Vulnerabilities:showAssets.html.twig',
						array('assets' => $assets));
	}

	private function calcCVSS($vulnerability, $asset) {
		$baseVector = $vulnerability->getCvssBaseVector();
		$tempVector = $vulnerability->getCvssTmpVector();

		$baseArray = array();
		$tempArray = array();
		for ($i = 6; $i < strlen($baseVector); $i++) {
			$param = '';
			$value = '';
			for (; $baseVector[$i] != ':'; $i++) {
				$param = $param . $baseVector[$i];
			}
			for ($i++; (($i < strlen($baseVector)) && ($baseVector[$i] != '/')); $i++) {
				$value = $value . $baseVector[$i];
			}

			switch ($param) {
			case 'AV':
				switch ($value) {
				case 'L':
					$baseArray['AccessVector'] = 0.395;
					break;
				case 'A':
					$baseArray['AccessVector'] = 0.646;
					break;
				case 'N':
					$baseArray['AccessVector'] = 1.0;
					break;
				}
				break;
			case 'AC':
				switch ($value) {
				case 'L':
					$baseArray['AccessComplexity'] = 0.35;
					break;
				case 'M':
					$baseArray['AccessComplexity'] = 0.61;
					break;
				case 'H':
					$baseArray['AccessComplexity'] = 0.71;
					break;
				}
				break;
			case 'Au':
				switch ($value) {
				case 'M':
					$baseArray['Authentication'] = 0.45;
					break;
				case 'S':
					$baseArray['Authentication'] = 0.56;
					break;
				case 'N':
					$baseArray['Authentication'] = 0.704;
					break;
				}
				break;
			case 'C':
				switch ($value) {
				case 'N':
					$baseArray['ConfImpact'] = 0.0;
					break;
				case 'P':
					$baseArray['ConfImpact'] = 0.275;
					break;
				case 'C':
					$baseArray['ConfImpact'] = 0.660;
					break;
				}
				break;
			case 'I':
				switch ($value) {
				case 'N':
					$baseArray['IntegImpact'] = 0.0;
					break;
				case 'P':
					$baseArray['IntegImpact'] = 0.275;
					break;
				case 'C':
					$baseArray['IntegImpact'] = 0.660;
					break;
				}
				break;
			case 'A':
				switch ($value) {
				case 'N':
					$baseArray['AvailImpact'] = 0.0;
					break;
				case 'P':
					$baseArray['AvailImpact'] = 0.275;
					break;
				case 'C':
					$baseArray['AvailImpact'] = 0.660;
					break;
				}
				break;
			}
		}

		for ($i = 6; $i < strlen($tempVector); $i++) {
			$param = '';
			$value = '';
			for (; $tempVector[$i] != ':'; $i++) {
				$param = $param . $tempVector[$i];
			}
			for ($i++; (($i < strlen($tempVector)) && ($tempVector[$i] != '/')); $i++) {
				$value = $value . $tempVector[$i];
			}

			switch ($param) {
			case 'E':
				switch ($value) {
				case 'U':
					$tempArray['Exploitability'] = 0.85;
					break;
				case 'P':
					$tempArray['Exploitability'] = 0.9;
					break;
				case 'F':
					$tempArray['Exploitability'] = 0.95;
					break;
				case 'H':
					$tempArray['Exploitability'] = 1.0;
					break;
				case 'ND':
					$tempArray['Exploitability'] = 1.0;
					break;
				}
				break;
			case 'RL':
				switch ($value) {
				case 'OF':
					$tempArray['RemediationLevel'] = 0.87;
					break;
				case 'T':
					$tempArray['RemediationLevel'] = 0.9;
					break;
				case 'W':
					$tempArray['RemediationLevel'] = 0.95;
					break;
				case 'U':
					$tempArray['RemediationLevel'] = 1.0;
					break;
				case 'ND':
					$tempArray['RemediationLevel'] = 1.0;
					break;
				}
				break;
			case 'RC':
				switch ($value) {
				case 'UC':
					$tempArray['ReportConfidence'] = 0.9;
					break;
				case 'UR':
					$tempArray['ReportConfidence'] = 0.95;
					break;
				case 'C':
					$tempArray['ReportConfidence'] = 1.0;
					break;
				case 'ND':
					$tempArray['ReportConfidence'] = 1.0;
					break;
				}
				break;
			}
		}
		
		$cvssBase = $this->calcCVSSbase($asset, $baseArray);
		$cvssTemp = $this->calcCVSStemp($cvssBase, $tempArray, $asset);
		return $cvss = $this->calcCVSSenv($asset, $cvssTemp);

	}

	private function calcCVSSbase($asset, $baseArray) {
		$adjustedImpact = 10.41
				* (1
						- (1 - $baseArray['ConfImpact'] * $asset->getConfReq())
								* (1
										- $baseArray['IntegImpact']
												* $asset->getIntegReq())
								* (1
										- $baseArray['AvailImpact']
												* $asset->getAvailReq()));
		$exploitability = 20 * $baseArray['AccessComplexity'] * $baseArray['Authentication'] * $baseArray['AccessVector'];
		$fadjustedImpact = 0;
		if ($adjustedImpact != 0) {
			$fadjustedImpact = 1.176;
		}
		
		$baseScore = (0.6 * $adjustedImpact + 0.4 * $exploitability - 1.5) * $fadjustedImpact;
		return round($baseScore, 1);
	}
	
	private function calcCVSStemp($baseScore, $tempArray, $asset) {
		$temporalScore = $baseScore * $tempArray['Exploitability'] * $tempArray['RemediationLevel'] * $tempArray['ReportConfidence'];
		return round($temporalScore, 1);
	}
	
	private function calcCVSSenv($asset, $CVSStemp) {
		$environmentalScore = ($CVSStemp + (10 - $CVSStemp) * $asset->getCollateralDamagePotential()) * $asset->getTargetDistribution();
		return round($environmentalScore, 1);
	}

}

