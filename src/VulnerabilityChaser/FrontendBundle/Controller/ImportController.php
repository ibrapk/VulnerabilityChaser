<?php

namespace VulnerabilityChaser\FrontendBundle\Controller;

use VulnerabilityChaser\FrontendBundle\Entity\Cve;
use VulnerabilityChaser\FrontendBundle\Entity\Scans;
use VulnerabilityChaser\FrontendBundle\Entity\Assets;
use VulnerabilityChaser\FrontendBundle\Entity\Idvulnerabilities;
use VulnerabilityChaser\FrontendBundle\Entity\Vulnerabilities;
#use VulnerabilityChaser\FrontendBundle\EntityCve;

use Symfony\Bundle\FrameworkBundle\Controller\Controller;

class ImportController extends Controller
{
	private function load($file)
	{

		if (file_exists($file)) {
			$xml = simplexml_load_file($file);
		} else {
			exit("Failed to open Nessus file.");
		}

		$em = $this->getDoctrine()->getEntityManager();
		
		foreach ($xml->Report->ReportHost as $host) {
			
			$asset = new Assets();
			$asset->setName((string) $host['name']);
			foreach ($host->HostProperties->tag as $tag) {
				switch ((string) $tag['name']) {
					case 'host-ip':
						$asset->setIp((string) $tag);
						break;
					case 'operating-system':
						$asset->setOs((string) $tag);
						break;
					case 'system-type':
						$asset->setSystemType((string) $tag);
						break;
				}
			}
			$em->persist($asset);
			
			foreach ($host->ReportItem as $item) {	
				// ComprobaciÃ³n de si ya existe dicha vulnerabilidad en la base de datos	
				$IdvTmp = $em->getRepository('FrontendBundle:Idvulnerabilities')->findOneBy(array('nessusplugin' => (int) $item['pluginID']));
				
				$vID = new Idvulnerabilities();
				if (!$IdvTmp)
				{
					$Idvulnerability = new Idvulnerabilities();
					$Idvulnerability->setName((string) $item->plugin_name);
					$Idvulnerability->setNessusplugin((int) $item['pluginID']);
					$Idvulnerability->setSolution((string) $item->solution);
					$Idvulnerability->setDescription((string) $item->description);
					$em->persist($Idvulnerability);
					$em->flush();
					$vID = $Idvulnerability;
					foreach ($item->cve as $cve) {
						$cveE = new Cve();
						$cveE->setCve((string) $cve);
						$cveE->setIdvulnerabilities($vID);
						$em->persist($cveE);
						$em->flush();
					}				
					
				}
				else 
				{
					$vID = $IdvTmp;
				}
				
				$Vulnerability = new Vulnerabilities();
				$Vulnerability->setAssets($asset);
				$Vulnerability->setIdvulnerabilities($vID);
				
				$Vulnerability->setService((string) $item['svc_name']);
				$Vulnerability->setPort((int) $item['port']);
				$Vulnerability->setProtocol((string) $item['protocol']);
				$Vulnerability->setCvssBase((float) $item->cvss_base_score);
				$Vulnerability->setEvidence((string) $item->plugin_output);

				$em->persist($Vulnerability);
				$em->flush();

			}
		}
		$em->flush();
		//return $this->render('FrontendBundle:Default:index.html.twig', array('name' => "test"));
		return $this->redirect($this->generateUrl('vulnerabilities'));
	}

	
    public function uploadAction()
    {
    	$scan = new Scans();
    	$form = $this->createFormBuilder($scan)
    	->add('file')
    	->getForm();

    	if ($this->getRequest()->getMethod() === 'POST') {
    		$form->bindRequest($this->getRequest());
    		if ($form->isValid()) {
    			$em = $this->getDoctrine()->getEntityManager();

    			$scan->setDate(new \DateTime());

    			$em->persist($scan);
    			$em->flush();

    			return $this->load($scan->getAbsolutePath());
    		}
    	}

    	return $this->render('FrontendBundle:Import:upload.html.twig',array ('form' => $form->createView()));
    }
}